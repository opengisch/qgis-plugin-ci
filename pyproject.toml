[build-system]
requires = ["setuptools>=61.0", "setuptools-scm", "wheel", "setuptools-git-versioning"]
build-backend = "setuptools.build_meta"

[project]
name = "qgis-plugin-ci"
dynamic = ["version", "readme", "dependencies", "optional-dependencies"]
authors = [
    {name = "Denis Rouzaud", email = "denis@opengis.ch"},
    {name = "Etienne Trimaille", email = "etienne.trimaille@gmail.com"},
    {name = "Julien Moura", email = "dev@ingeoveritas.com"},
]
description = "Let qgis-plugin-ci package and release your QGIS plugins for you. Have a tea or go hiking meanwhile. Contains scripts to perform automated testing and deployment for QGIS plugins. These scripts are written for and tested on GitHub Actions, GitLab CI, Travis-CI, and Transifex."
requires-python = ">=3.9"
keywords = ["QGIS", "CI", "changelog", "plugin"]
license = {text = "GPLv3"}
classifiers = [
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: System Administrators",
        "Intended Audience :: Developers",
        "Intended Audience :: Information Technology",
        "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
        "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Programming Language :: Python :: 3.13",
        "Programming Language :: Python :: Implementation :: CPython",
        "Topic :: Scientific/Engineering :: GIS",
]

[project.scripts]
qgis-plugin-ci = "qgispluginci.cli:cli"

[project.urls]
homepage = "https://opengisch.github.io/qgis-plugin-ci/"
documentation = "https://opengisch.github.io/qgis-plugin-ci/"
repository = "https://github.com/opengisch/qgis-plugin-ci/"
tracker = "https://github.com/opengisch/qgis-plugin-ci/issues"

[tool.setuptools]
packages = ["qgispluginci", "qgispluginci.translation_clients"]

[tool.setuptools-git-versioning]
enabled = true

[tool.setuptools.dynamic]
readme = {file = ["README.md"], content-type = "text/markdown"}
dependencies = {file = ["requirements/base.txt"]}
optional-dependencies.dev = {file = ["requirements/development.txt"]}

[dependency-groups]
dev = [
    {include-group = "lint"},

]
lint = [
    "ruff"
]

#
# Ruff
#
# https://doc.astral.sh/ruff/configuration
#
[tool.ruff]
line-length = 88
target-version = "py39"
exclude = [
    ".venv",
    "test/fixtures",
    "docs",
]

[tool.ruff.format]
indent-style = "space"

[tool.ruff.lint]
extend-select = ["E", "F", "I", "ANN", "W", "T", "COM", "RUF"]
ignore = [
    "ANN002",
    "ANN003",
    "ANN204",
    "ANN401",
    "T201",
    "COM812",
    # TODO: Temporary ignore linter errors until
    # they are fixed
    "E20",     # Whitespace before/after element
    "E402",    # E402 Module level import not at top of file
    "E501",    # Line too long
    "ANN001",  # Missing type annotation for function argument
    "ANN201",  # Missing return type annotation for public function
    "ANN205",  # Missing return type annotation for staticmethod
    "ANN206",  # Missing return type annotation for classmethod
    "RUF012",  # Mutable class attributes should be annotated
    "RUF013",  # PEP 484 prohibits implicit `Optional`
]


[tool.ruff.lint.isort]
lines-between-types = 1
order-by-type = true

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
suppress-none-returning = true
suppress-dummy-args = true
